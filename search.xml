<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo、markdown用法</title>
      <link href="/ppy.github.io/2020/05/24/markdown/"/>
      <url>/ppy.github.io/2020/05/24/markdown/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/8363e3815b92" target="_blank" rel="noopener">Markdown语法中输入数学公式（MathJax）及特殊符号</a><br><a href="https://yafine-blog.cn/posts/4ab2.html" target="_blank" rel="noopener">Hexo+github搭建博客(超级详细版，精细入微)</a></p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/ppy.github.io/2020/05/24/algorithm/"/>
      <url>/ppy.github.io/2020/05/24/algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="数组展平"><a href="#数组展平" class="headerlink" title="数组展平"></a>数组展平</h2><h3 id="二维数组展平"><a href="#二维数组展平" class="headerlink" title="二维数组展平"></a>二维数组展平</h3><p>展平一个数组，数组最多二维[[1,2],[3,4]] =&gt; [1,2,3,4]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [].concat(...arr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">[].concat(arr)</span><br><span class="line">[].concat(...[arr])</span><br><span class="line">[].apply(<span class="literal">null</span>,[arr])</span><br></pre></td></tr></table></figure><p>concat() 方法用于连接两个或多个数组。<br>该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p><h3 id="多维数组展平-递归"><a href="#多维数组展平-递归" class="headerlink" title="多维数组展平(递归)"></a>多维数组展平(递归)</h3><p>展评一个数组,[[1,2],3,[[[4],5]]] =&gt; [1,2,3,4,5]<br>对数组 ${S}$ = {${a}_1$,${a}_2$,…,${a}_n$},函数${F}$将数组展平<br>${F}({S}) = {F}(a_1)\cup{F}(a_2)\cup…\cup{F}(a_n)$<br>$<br>  F(a_i)=<br>  \begin{cases}<br>  a_i数字 \<br>  F(a_i) 数组<br>  \end{cases}<br>$</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [].concat(</span><br><span class="line">    ...arr.map(<span class="function"><span class="params">x</span>=&gt;</span><span class="built_in">Array</span>.isArray(x)?flatten(x):x)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>添加滚动事件 60ms 响应1次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>,throttle(<span class="built_in">console</span>.log))</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func,delay = <span class="number">60</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lock = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lock)&#123;<span class="keyword">return</span>&#125;</span><br><span class="line">    func(...args)</span><br><span class="line">    lock = <span class="literal">true</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      lock = <span class="literal">false</span></span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤掉重复的验证事件(用户输入停止后300ms触发验证)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func,delay = <span class="number">300</span>,I = null</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    clearInterval(I)</span><br><span class="line">      I = setTimeout(func.bind(<span class="literal">null</span>,...args), delay);</span><br><span class="line">      <span class="comment">// I = setTimeout((...args) =&gt; &#123;func(...args)&#125;, delay);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><p>柯里化，英语：Currying(果然是满满的英译中的既视感)，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p><p><a href="https://www.jianshu.com/p/2975c25e4d71" target="_blank" rel="noopener">详解JS函数柯里化</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="params">func</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> g = <span class="function">(<span class="params">...allArgs</span>) =&gt;</span> allArgs.length &gt;= func.length?</span><br><span class="line">  func(...allArgs)</span><br><span class="line">    : <span class="function">(<span class="params">...args</span>) =&gt;</span> g(...allArgs,...args)</span><br><span class="line">  <span class="keyword">return</span> g</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo = curry(<span class="function">(<span class="params">a,b,c,d</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a,b,c,d)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于curry(foo),g函数参数足够4个,就调用foo(a,b,c,d),如果小于4个就返回一个可以继续积累参数的函数</p><h3 id="Y-组合子"><a href="#Y-组合子" class="headerlink" title="Y-组合子"></a>Y-组合子</h3><p>前置知识lamabda演算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> y = <span class="function"><span class="keyword">function</span> (<span class="params">le</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(f)</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;(<span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> le(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">...x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (f(f))(...x)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> curryY = <span class="function"><span class="params">func</span> =&gt;</span> y(</span><br><span class="line">  g =&gt; &#123;</span><br><span class="line">    (...allArgs) =&gt; &#123;</span><br><span class="line">      allArgs.length &gt;= func.length ?</span><br><span class="line">      func(...allArgs)</span><br><span class="line">        : <span class="function">(<span class="params">...args</span>) =&gt;</span> g(...allArgs,...args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> foo = curryY(<span class="function">(<span class="params">a,b,c,d</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a,b,c,d)</span><br><span class="line">&#125;)</span><br><span class="line">foo(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> javascript算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
